# File: deployment/docker-compose.prod.yml
# Production Docker Compose configuration

version: '3.8'

services:
  # Main FE-AI application
  fe-ai-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_ENV: production
    image: fe-ai:2.3.1
    container_name: fe-ai-app-prod
    restart: unless-stopped
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=production
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
      - ./config.prod.yaml:/app/config.yaml:ro
      - /etc/ssl/certs:/app/certs:ro
    networks:
      - fe-ai-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB with replica set
  mongodb-primary:
    image: mongo:5.0
    container_name: fe-ai-mongodb-primary
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ADMIN_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ADMIN_PASSWORD}
      - MONGO_INITDB_DATABASE=fe_ai_system
      - MONGO_REPLICA_SET_NAME=rs0
    volumes:
      - mongodb-primary-data:/data/db
      - ./deployment/mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./deployment/mongodb/init-replica.js:/docker-entrypoint-initdb.d/init-replica.js:ro
    networks:
      - fe-ai-network
    command: mongod --config /etc/mongod.conf --replSet rs0
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: fe-ai-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - fe-ai-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: fe-ai-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - fe-ai-app
    networks:
      - fe-ai-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fe-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - fe-ai-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: fe-ai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SERVER_ROOT_URL=https://grafana.yourdomain.com
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - fe-ai-network

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: fe-ai-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./deployment/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - fe-ai-network
    command: -config.file=/etc/loki/local-config.yaml

  # Log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: fe-ai-promtail
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/fe-ai:ro
      - ./deployment/promtail/promtail.yml:/etc/promtail/config.yml:ro
    networks:
      - fe-ai-network
    command: -config.file=/etc/promtail/config.yml

volumes:
  mongodb-primary-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

networks:
  fe-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16